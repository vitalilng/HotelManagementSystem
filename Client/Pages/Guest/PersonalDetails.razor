@page "/personalpage"
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient httpClient
@inject NavigationManager uriHelper
@inject IJSRuntime js
@inject MudBlazor.ISnackbar snackBar


@if (claims.Count() > 0)
{
    <MudCard Elevation="25">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h4">@authMessage</MudText>                
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <MudTextField @bind-Value="registrationModel.FullName" Label="Full Name" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            <MudTextField @bind-Value="registrationModel.UserName" Label="Username" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            <MudTextField @bind-Value="registrationModel.Email" Label="Email" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            <MudTextField @bind-Value="registrationModel.PhoneNumber" Label="Phone number" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            <MudTextField @bind-Value="registrationModel.Country" Label="Country" Variant="Variant.Text" Margin="Margin.Normal"></MudTextField>
            <br />
            <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="UpdateGuest">Update Data</MudButton>
        </MudCardContent>
    </MudCard>    
}

@code {
    protected bool IsDisabled { get; set; }
    private string authMessage="";
    private string userId = "";
    UserDetailsDto registrationModel = new UserDetailsDto();
    private IEnumerable<Claim> claims = Enumerable.Empty<Claim>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();                
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            authMessage = $"Hello {user.Identity.Name}, this is your personal page!";
            claims = user.Claims;
            userId = $"{user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value}";          
            registrationModel = await httpClient.GetFromJsonAsync<UserDetailsDto>($"api/guests/{userId}");
        }
    }

    async Task UpdateGuest()
    {
        await httpClient.PutAsJsonAsync($"api/guests/{userId}", registrationModel);
        await js.InvokeVoidAsync("alert", $"Updated Successfully!");
        uriHelper.NavigateTo("personalpage");
    }
}
