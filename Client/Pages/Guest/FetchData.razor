@page "/guests"
@inject HttpClient httpClient
@inject IJSRuntime js
@attribute [Authorize(Roles="admin")]
@inject MudBlazor.ISnackbar snackBar








@if (registeredGuests == null)
{
    <MudText Typo="Typo.h6">Loading...</MudText>
}
else if(registeredGuests.Length == 0)
{
     <MudText Typo="Typo.h6">No records found...</MudText>
}
else
{
    <MudCard Elevation="25">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">Guests</MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="guest/create">Add Guest</MudButton>
            </CardHeaderContent>
        </MudCardHeader>
    </MudCard>
    <br />
    <MudTable Elevation="25" Items="registeredGuests" Hover="true" Breakpoint="Breakpoint.Sm" RightAlignSmall="true" @bind-registeredGuests="registeredGuests">

    </MudTable>

}
@code {
    RegistrationDto[]? registeredGuests { get; set; }
    RegistrationDto registeredGuest = new();
    private string searchString = "";
    protected override async Task OnInitializedAsync()
    {
        registeredGuests = await httpClient.GetFromJsonAsync<RegistrationDto[]>("api/guests");
    }

    async Task DeleteGuest(string? guestId)
    {
        if (registeredGuests is not null && guestId != null)
        {
            var guestUser = registeredGuests.First(x => x.Id == guestId);
            if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete {guestUser.UserName}'s  Record ?"))
            {
                await httpClient.DeleteAsync($"api/guests/{guestId}");
                await OnInitializedAsync();
            }
        }
    }

    private bool Search(RegistrationDto registeredGuest)
    {
        if (string.IsNullOrEmpty(searchString)) return true;
        if (registeredGuest.FullName.Contains(searchString, StringComparison.OrdinalIgnoreCase)
            ||registeredGuest.UserName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
        {
            return true;
        }
        return false;
    }


}