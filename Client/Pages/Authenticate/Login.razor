@page "/login"
@layout AuthLayout
@inject NavigationManager navigationManager
@inject CustomStateProvider authStateProvider
@inject ISnackbar snackBar

<EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="loginModel">
<DataAnnotationsValidator />
    <MudGrid Outlined=true>
    <MudItem xs="6" sm="7">
            <MudCard Outlined=true>
                <MudCardContent>
                    <MudText Typo="Typo.h6">Login</MudText>
                    <MudTextField Label="Username" HelperText="Max. 8 characters"
                                @bind-Value="loginModel.UserName" 
                                For="@(() => loginModel.UserName)"
                                Variant="Variant.Filled" />

                    <MudTextField Label="Password" HelperText="Choose a strong password" Class="mt-3"
                                @bind-Value="loginModel.Password" 
                                For="@(() => loginModel.Password)"                                 
                                InputType="@PasswordInput" Immediate="true"
                                Variant="Variant.Filled"
                                Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon"
                                OnAdornmentClick="ButtonTestClick"
                                AdornmentAriaLabel="Show Password" />

                    <MudCheckBox T="bool" Label="Remember Me!" 
                                @bind-Value="@loginModel.RememberMe" 
                                For="@(() => loginModel.RememberMe)" />
                    <MudText Typo="Typo.h6">Don't have an account?</MudText>
                    <MudLink Href="register" Typo="Typo.body2">Go To Registration</MudLink>
                </MudCardContent>
                <MudCardActions>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Login</MudButton>
                </MudCardActions>                
            </MudCard>
    </MudItem>
    <MudItem xs="6" >
        <MudPaper Class="pa-4 mud-height-full">               
            @if (!success)          
            {
                <MudText Color="@Color.Error">
                    <ValidationSummary />
                </MudText>
            }
        </MudPaper>
    </MudItem>    
</MudGrid>
</EditForm>

@code {
    bool success;
    string[] errors = { };
    MudTextField<string>? passwordField;
    MudForm? form;  
    LoginDto loginModel { get; set; } = new LoginDto();
    string error = "";

    /// <summary>
    /// password visibility icon
    /// </summary>
    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ButtonTestClick()
    {
        if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    async Task OnSubmit()
    {
        error = null;
        try
        {
            await authStateProvider.Login(loginModel);
            navigationManager.NavigateTo("");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
}