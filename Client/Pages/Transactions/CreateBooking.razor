@page "/createbooking"
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject StateContainer StateContainer
@inject GlobalStateContainer globalStateContainer
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar snackBar
@implements IDisposable

<EditForm Model="@transactionModelForCreation">
    <DataAnnotationsValidator />
    <MudPaper Elevation="0" MaxWidth="20%">
        <br />
        <MudButton Variant="Variant.Filled" Color="Color.Default" Class="ml-auto align-content-lg-start" Href=@($"/rooms/{roomId}")>Back</MudButton>
        <br />
    </MudPaper>
    <br />
    <MudPaper MaxWidth="60%">
        <MudCard Outlined="true">
            <MudCardHeader>
                <MudText Typo="Typo.h5" Color="Color.Info">Please, select the Arrival and Departure Dates</MudText>
            </MudCardHeader>
            <MudCardContent>
                <MudTextField Label="Room Type" Immediate=true Variant="Variant.Outlined" Value="roomType" ReadOnly=true/>
                <br />
                <MudDatePicker Label="Arrival Date"
                               Date="transactionParameters.DateOfArrival"
                               DateChanged="OnArrivalDateChange"
                               Required=true RequiredError="Arrival Date is required!"
                               PickerVariant="PickerVariant.Dialog" Rounded="true"
                               Variant="Variant.Outlined"
                               Elevation="1" DateFormat="dd-MM-yyyy" MinDate=DateTime.Now.Date/>

                <br />
                <MudSpacer></MudSpacer>
                <MudDatePicker Label="Departure Date"
                               Date="transactionParameters.DateOfDeparture"
                               DateChanged="OnDepartureDateChange"
                               Required=true RequiredError="Departure Date is required!"
                               PickerVariant="PickerVariant.Dialog" Rounded="true"
                               Variant="Variant.Outlined"
                               Elevation="12" DateFormat="dd-MM-yyyy" MinDate=DateTime.Now.Date/>
                <br />

                @if (userType is "admin" or "ADMIN")
                {
                    <MudTextField Label="Room Price" @bind-Value="roomPrice" Variant="Variant.Outlined" />
                    <br />
                    <MudTextField Label="Total Sum" @bind-Value="totalSum" Variant="Variant.Outlined" />
                }
                else
                {
                    <MudTextField Label="Room Price" @bind-Value="roomPrice" Variant="Variant.Outlined" ReadOnly=true DisableUnderLine=true />
                    <br />
                    <MudTextField Label="Total Sum" @bind-Value="totalSum" Variant="Variant.Outlined" ReadOnly=true DisableUnderLine=true />
                }

                @if (!string.IsNullOrEmpty(validationError))
                {
                    <br />
                    <MudAlert Severity="Severity.Error" Dense=true ContentAlignment="HorizontalAlignment.Left">@validationError</MudAlert>
                }

                <br />
                <br />
                <MudText>Book and go to Payment page</MudText>
                <br />
            </MudCardContent>
            <MudCardActions>
                <MudButton StartIcon="@Icons.Material.Filled.Book" ButtonType="ButtonType.Submit" 
                           Variant="Variant.Filled" Color="Color.Primary" Class="oi-align-left" OnClick="BookRoom">Book</MudButton>
            </MudCardActions>
        </MudCard>
    </MudPaper>
</EditForm>

@code {
    private TransactionDataForCreationDto? transactionModelForCreation { get; set; } = new();
    private RoomDto? RoomDetailsDto { get; set; } = new();
    private TransactionParameters transactionParameters { get; set; } = new();    

    [Parameter]
    public Guid roomId { get; set; }
    string? roomType = "";
    int totalSum = 0;
    int roomPrice = 0;
    string userId = "";
    string userType = "";
    string validationError = "";    

    protected async override Task OnInitializedAsync()
    {
        var user = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User;
        if (user is not null && user?.Identity is not null) 
        {
            userId = user.FindFirst(c => c.Type.Contains("nameidentifier"))?.Value;
            userType = user.Identity.Name;
        }       

        transactionParameters = new TransactionParameters
        {
            DateOfArrival = DateTime.Today,
            DateOfDeparture = DateTime.Today.AddDays(1)
        };

        await base.OnInitializedAsync();
        RoomDetailsDto = StateContainer.Value;

        if (RoomDetailsDto is not null)
        {
            roomType = RoomDetailsDto.RoomType;
            roomPrice = RoomDetailsDto.Price;
            roomId = RoomDetailsDto.Id;
        }
    }   

    private void OnArrivalDateChange(DateTime? dateTime)
    {
        if (RoomDetailsDto is not null && transactionParameters != null)
        {
            transactionParameters.DateOfArrival = dateTime;
            transactionParameters.DateOfDeparture = dateTime;
        }
    }

    private void OnDepartureDateChange(DateTime? dateTime)
    {
        if (RoomDetailsDto is not null && transactionParameters != null && dateTime > transactionParameters.DateOfArrival)
        {
            var transactionData = new TransactionDataForCreationDto
            {
                    ApplicationUserId = userId,
                    RoomId = RoomDetailsDto.Id,
                    ArrivalDate = transactionParameters.DateOfArrival,
                    DepartureDate = dateTime,
                    RoomPrice = RoomDetailsDto.Price
            };
            totalSum = (int)transactionData.TotalSum;                       
            transactionParameters.DateOfDeparture = dateTime;
        }
        else
        {
            ClearField();
        }
    }

    private void ClearField()
    {
        totalSum = 0;
    }

    async Task BookRoom()
    {
        var bookingModel = new TransactionDataForCreationDto();

        if (RoomDetailsDto is not null && totalSum != 0)
        {
            validationError = validationError.Remove(0);
            bookingModel = new TransactionDataForCreationDto
            {
                ApplicationUserId = userId,
                RoomId = RoomDetailsDto.Id,
                ArrivalDate = transactionParameters.DateOfArrival,
                DepartureDate = transactionParameters.DateOfDeparture,
                RoomPrice = RoomDetailsDto.Price,
                _totalSum = totalSum                
            };
            await httpClient.PostAsJsonAsync("api/transactions", bookingModel);
            navigationManager.NavigateTo("payment");
        }
        else if (transactionParameters.DateOfArrival == transactionParameters.DateOfDeparture)
        {
            validationError = "Departure Date should be at least 2 days after Arrival Date";
        }
        else if (totalSum == 0)
        {
            validationError = "Total Sum cannot be 0, please select the Arrival and Departure Dates";
        }
    }

    public void Dispose()
    {
        globalStateContainer.OnStateChange -= StateHasChanged;
    }
} 