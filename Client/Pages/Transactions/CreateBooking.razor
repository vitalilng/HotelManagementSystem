@page "/createbooking"
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject StateContainer StateContainer
@inject GlobalStateContainer globalStateContainer
@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IDisposable
@inject ISnackbar snackBar

<MudPaper>
        <MudCard Outlined="true">
            <MudCardContent>
                <MudTextField Label="UserName" Immediate=true Variant="Variant.Text"
                                Value="username" ReadOnly=true />

                <MudTextField Label="Room Type" Immediate=true Variant="Variant.Text" Value="roomType" ReadOnly=true />

                <MudDatePicker Label="Arrival Date"                                
                               Date="transactionParameters.DateOfArrival"                               
                               Required=true  RequiredError="Arrival Date is required!" 
                               PickerVariant="PickerVariant.Dialog" Rounded="true"
                               Elevation="1" DateFormat="dd-MM-yyyy" MinDate=DateTime.Now.Date
                               Validation="@transactionParameters.ValidDateRange" />

                <MudSpacer></MudSpacer>
                <div onblur="CalculateTotalSum">
                <MudDatePicker Label="Departure Date"
                               Date="transactionParameters.DateOfDeparture"
                               DateChanged="CalculateTotalSum"
                               onfocusout="CalculateTotalSum"
                               Required=true RequiredError="Departure Date is required!"
                               PickerVariant="PickerVariant.Dialog" Rounded="true"
                               Elevation="12" DateFormat="dd-MM-yyyy" MinDate=DateTime.Now.Date
                               Validation="@transactionParameters.ValidDateRange" />

                </div>
                
                <MudTextField Label="Total Sum" 
                              @bind-Value="totalSum"
                              Variant="Variant.Text" />

            </MudCardContent>
            <MudCardActions>
                <MudText>Create Booking and go to Payment page</MudText>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="() => BookRoom()">Book</MudButton>
            </MudCardActions>
        </MudCard>
</MudPaper>
    

@code {
    TransactionDataForCreationDto? transactionModelForCreation { get; set; } = new();
    RoomDto? RoomDetailsDto { get; set; } = new();
    TransactionParameters transactionParameters { get; set; } = new();    

    public event Action? OnStateChange;
    string? username = "";
    string? roomType = "";
    int totalSum = 0;

    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user?.Identity is not null)
        {
            username = user.Identity.Name;
        }

        transactionParameters = new TransactionParameters
        {
            DateOfArrival = DateTime.Today,
            DateOfDeparture = DateTime.Today.AddDays(1)
        };
        await base.OnInitializedAsync();
        RoomDetailsDto = StateContainer.Value;
        if (RoomDetailsDto is not null)
        {
            roomType = RoomDetailsDto.RoomType;            
            var dateRange = new TransactionDataForCreationDto { Room = RoomDetailsDto, ApplicationUserId = username, RoomId = RoomDetailsDto.Id, ArrivalDate = transactionParameters.DateOfArrival, DepartureDate = transactionParameters.DateOfDeparture };
            totalSum = (int)dateRange.TotalSum;
        }

        
    }

    private void CalculateTotalSum()
    {
        if (RoomDetailsDto is not null && transactionParameters != null)
        {
            var dateRange = new TransactionDataForCreationDto {Room = RoomDetailsDto, ApplicationUserId = username, RoomId = RoomDetailsDto.Id, ArrivalDate = transactionParameters.DateOfArrival, DepartureDate = transactionParameters.DateOfDeparture };
            totalSum = (int)dateRange.TotalSum;
        }
    }

    async Task BookRoom()
    {
        transactionModelForCreation.ApplicationUserId = username;
        transactionModelForCreation.RoomId = RoomDetailsDto.Id;


        await httpClient.PostAsJsonAsync("api/transactions", transactionModelForCreation);
        navigationManager.NavigateTo("payment");// a new page for paying the booking will be created
    }



    public void Dispose()
    {
       globalStateContainer.OnStateChange -= StateHasChanged;
    }

}

