@page "/"
@inject ISnackbar snackBar
@inject NavigationManager NavigationManager
@inject HttpClient httpClient
@inject IStringLocalizer<Resource> localizer


<MudCard Outlined=true>
    <MudCardContent>
                <MudText Align="Align.Center" Typo="Typo.h3">@localizer["booking"]</MudText>
                <MudContainer class="d-flex">
                @if (transactionParameters is not null)
                {               
                    <MudDatePicker Label=@localizer["startDate"] @bind-Date="transactionParameters.DateOfArrival" PickerVariant="PickerVariant.Dialog" Rounded="true" Elevation="1" DateFormat="dd-MM-yyyy" MinDate=DateTime.Now.Date />
                    <MudSpacer></MudSpacer>
                    <MudDatePicker Label=@localizer["endDate"] @bind-Date="transactionParameters.DateOfDeparture" PickerVariant="PickerVariant.Dialog" Rounded="true" Elevation="12" DateFormat="dd-MM-yyyy" MinDate=DateTime.Now.Date />
                }
                </MudContainer>

                <MudContainer Class="align-content-center">
                    @if (!string.IsNullOrEmpty(arrivalDateError) && !string.IsNullOrEmpty(departureDateError))
                    {
                        <MudAlert Severity="Severity.Error" Dense=true ContentAlignment="HorizontalAlignment.Center">@arrivalDateError</MudAlert>
                        <MudAlert Severity="Severity.Error" Dense=true ContentAlignment="HorizontalAlignment.Center">@departureDateError</MudAlert>
                    }
                    else if (!string.IsNullOrEmpty(arrivalDateError) && string.IsNullOrEmpty(departureDateError))
                    {
                        <MudAlert Severity="Severity.Error" Dense=true ContentAlignment="HorizontalAlignment.Center">@arrivalDateError</MudAlert>
                    }
                    else if (!string.IsNullOrEmpty(departureDateError) && string.IsNullOrEmpty(arrivalDateError))
                    {
                        <MudAlert Severity="Severity.Error" Dense=true ContentAlignment="HorizontalAlignment.Center">@departureDateError</MudAlert>
                    }
                    else if (!string.IsNullOrEmpty(validationError))
                    {
                        <MudAlert Severity="Severity.Error" Dense=true ContentAlignment="HorizontalAlignment.Center">@validationError</MudAlert>
                    }
                </MudContainer>
                <br />
                <MudContainer Class="d-flex justify-center align-center">
                    <MudButton Class="pa-4" ButtonType="ButtonType.Button" Size=Size.Large Variant="Variant.Filled" Color="Color.Tertiary" OnClick="@GetAvailableRooms">@localizer["checkAvailability"]</MudButton> 
                </MudContainer>
                
                <br/>
                <br/>
                <MudText Align="Align.Center" Typo="Typo.h3">@localizer["listOfRooms"]:</MudText>

                <MudTable Elevation="25" Items="rooms" @bind-rooms="rooms" Dense=true Striped=false Bordered=false Hover=true >
                    <ToolBarContent>                        
                        <MudSpacer />                        
                    </ToolBarContent>
                    <ColGroup>
                        <col style="width:10%;" />
                        <col style="width:10%;" />
                        <col style="width:3%;" />
                        <col style="width:10%;" />
                        <col style="width:20%;" />
                        <col style="width:1%;" />
                        <col style="width:30%;" />
                        <col style="width:1%;" />
                        <col style="width:5%;" />
                    </ColGroup>
                    <HeaderContent>
                        <MudTh>Image</MudTh>
                        <MudTh>Type</MudTh>
                        <MudTh>Size</MudTh>
                        <MudTh>Nr Of Beds</MudTh>
                        <MudTh>Room Options</MudTh>
                        <MudTh>Max Persons</MudTh>
                        <MudTh>Description</MudTh>
                        <MudTh>Price</MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Image">
                            <MudImage Src="@context.ImageUrl" Elevation="25" Width="200" Height="150" />
                        </MudTd>
                        <MudTd DataLabel="Type">@context.RoomType</MudTd>
                        <MudTd DataLabel="Size">@context.RoomSize</MudTd>
                        <MudTd DataLabel="Nr Of beds">@context.NrOfBedsAndSizes</MudTd>
                        <MudTd DataLabel="Room Options">@context.RoomOptions</MudTd>
                        <MudTd DataLabel="Max Persons">@context.MaxPersonsAllowed</MudTd>
                        <MudTd DataLabel="Description">@context.Description</MudTd>
                        <MudTd DataLabel="Price">$@context.Price</MudTd>
                        <MudTd>
                            <MudLink Class="py-5" ButtonType="ButtonType.Button" Size=Size.Large Variant="Variant.Filled" Color="Color.Tertiary" 
                                     OnClick="() => GoToRoomDetailsPage(context.Id)">Details</MudLink>                                
                        </MudTd>
                    </RowTemplate>            
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
    </MudCardContent>
</MudCard>

@code {
    RoomDto[]? rooms { get; set; }
    RoomDto room = new();
    CultureSelector? cultureSelector { get; set; } = new();
    public TransactionParameters? transactionParameters { get; set; } = new();

    [Parameter]
    [SupplyParameterFromQuery(Name = "arrivaldate")]
    public string? arrivaldate { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "departuredate")]
    public string? departuredate { get; set; }

    string arrivalDateError = "";
    string departureDateError = "";
    string validationError = "";
    private string? backUrl;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (!string.IsNullOrEmpty(arrivaldate) && !string.IsNullOrEmpty(departuredate))
        {
            if (DateTime.TryParseExact(arrivaldate, "dd-MM-yyyy", cultureSelector.Culture, System.Globalization.DateTimeStyles.None, out var parsedArrivalDate) 
            && DateTime.TryParseExact(departuredate, "dd-MM-yyyy", cultureSelector.Culture, System.Globalization.DateTimeStyles.None, out var parsedDepartureDate))
            {
                transactionParameters.DateOfArrival = parsedArrivalDate;
                transactionParameters.DateOfDeparture = parsedDepartureDate;
            }
            await GetAvailableRooms();
        }
    }

    private void GoToRoomDetailsPage(Guid roomId)
    {
        NavigationManager.NavigateTo($"rooms/{roomId}");
    }

    private string ValidateDateRange(DateTime? dateTime)
    {
        if (dateTime.HasValue && transactionParameters.DateOfArrival.HasValue && dateTime.Value.Date < transactionParameters.DateOfArrival.Value.Date)
        {
            return "Departure date cannot be sooner than Arrival date!";
        }
        return null;
    }

    async Task GetAvailableRooms()
    {
        if (transactionParameters is not null && transactionParameters.DateOfArrival < transactionParameters.DateOfDeparture)
        {
            arrivalDateError = arrivalDateError.Remove(0);
            departureDateError = departureDateError.Remove(0);
            validationError = validationError.Remove(0);
            var dateOfArrival = transactionParameters.DateOfArrival;
            var dateOfDeparture = transactionParameters.DateOfDeparture;
            var url = $"api/rooms/GetAvailableRooms?DateOfArrival={dateOfArrival}&DateOfDeparture={dateOfDeparture}";
            rooms = await httpClient.GetFromJsonAsync<RoomDto[]>(url);
            UsingQueryParams();
        }
        else if (transactionParameters is not null && transactionParameters.DateOfArrival > transactionParameters.DateOfDeparture)
        {
            arrivalDateError = arrivalDateError.Remove(0);
            departureDateError = departureDateError.Remove(0);
            validationError = "Departure Date should be after Arrival Date";
        }
        else if (!transactionParameters.DateOfArrival.HasValue && !transactionParameters.DateOfDeparture.HasValue)
        {
            arrivalDateError = "Please select Arrival Date";
            departureDateError = "Please select Departure Date";
        }
        else if (!transactionParameters.DateOfArrival.HasValue)
        {
            arrivalDateError = "Please select Arrival Date";
            departureDateError = departureDateError.Remove(0);
        }
        else if (!transactionParameters.DateOfDeparture.HasValue)
        {            
            arrivalDateError = arrivalDateError.Remove(0);            
            departureDateError = "Please select Departure Date";
        }
        else if (transactionParameters.DateOfArrival == transactionParameters.DateOfDeparture)
        {
            arrivalDateError = arrivalDateError.Remove(0);
            departureDateError = departureDateError.Remove(0);
            validationError = "Departure Date should be at least 2 days after Arrival Date";
        }
    }

    void UsingQueryParams()
    {
        var query = new Dictionary<string, string?>
        {
            {"arrivaldate", transactionParameters.DateOfArrival?.ToString("dd-MM-yyyy")},
            {"departuredate", transactionParameters.DateOfDeparture?.ToString("dd-MM-yyyy")}
        };

        var queryString = string.Join("&", query
        .Where(kvp => !string.IsNullOrEmpty(kvp.Value))
        .Select(kvp => $"{HttpUtility.UrlEncode(kvp.Key)}={HttpUtility.UrlEncode(kvp.Value)}"));

        var encodedUrl = $"{NavigationManager.BaseUri}?{queryString}";
        NavigationManager.NavigateTo(encodedUrl);

        var uri = new Uri(NavigationManager.Uri);
        var queryParams = HttpUtility.ParseQueryString(uri.Query);

        var arrivalParam = queryParams.Get("arrivaldate");
        var departureParam = queryParams.Get("departuredate");

        if (!string.IsNullOrEmpty(arrivalParam) && !string.IsNullOrEmpty(departureParam))
        {
            arrivaldate = arrivalParam;
            departuredate = departureParam;
        }
    }
}